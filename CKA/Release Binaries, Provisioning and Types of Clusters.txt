Hello and welcome to this section on installation, configuration, and validation. Let's go ahead and change to that section in The Pod of Minerva book. This is a new section, so up above we'll click on "Install, Config, and Validate" and then "Binaries, Provision, and Type" under topic. I'll start off by saying that you will not be required to build a cluster from scratch in the exam, but we'll explore the possibilities of such to give you a better understanding of the existing steps for setting up the cluster, which in turn will help you identify the necessary parts of the Kubernetes cluster, if that makes sense. Picking the right solution is important. Deciding where to run Kubernetes depends on what resources you have available and how much flexibility you need. You can run Kubernetes on a hosted cloud provider or on bare metal. You can build a custom solution, or you can go with a prebuilt solution. What do I mean by custom solution? I'm talking about building the cluster from scratch, meaning every single component will be installed individually and customized to your requirements. There are certain components that you absolutely need, and then there are components that you can do without, given that you have the appropriate infrastructure configuration already in place that is. For example, Kubernetes comes with a module called Cloud Provider. In the PKG directory and cloud provider in cloud.go. But it's possible to create a custom cluster without implementing a cloud provider at all, like when using bare metal servers. Also, instead of using an overlay network like Flannel, Weave, or Calico, you can configure the underlying network fabric yourself. Additionally, to create a custom solution, you'll need the binaries for ETCD, container runtime, kubelet, kube-proxy, kube API server, kube controller manager, and kube scheduler. The Kubernetes binary release includes all the Kubernetes binaries as well as the supported release of ETCD. You can take a look at the Kubernetes binaries by clicking on the link below. To locate the client and server binary separately, run the get-kube-binaries shell script in the cluster directory and then extract the client and server binary separately. All the components of the control plane, API server, scheduler, ETCD, and controller manager, as well as the non control plane component kube-proxy can either run in a pod, which is the recommended way, or they can also be installed directly on the node itself. To go the recommended route, using a pod to run these, you may choose to build your own images. This is useful if you're using a private registry. Kubelet is the only component that must run on a system, so not as a pod. That's because Kubelet is responsible for running everything else as pods. It's the thing that's running the pods. You can choose to access the API server, using HTTPS for securing cluster communication. Since this is the recommended approach for production environments, and we'll talk about this more in the later lesson. Overall, prebuilt solutions are a much simpler way to create your Kubernetes cluster. I'll show you how to create your own Kubernetes cluster using the Linux Academy Cloud Playground in the next lesson. But you could also use a local machine solution, which is good for testing purposes and is an easy way to get up and running with Kubernetes without having to consume any cloud resources. There is a Minikube, Minishift, MicroK8s, or even Ubuntu on LXD. In my opinion, Minikube is the quickest and easiest way to deploy a single node cluster. Minikube is great for testing your apps locally, and it's available as a single binary for Mac OS, Linux, and Windows. There are step by step instructions on how to install Minikube on their GitHub page. Check out the link below to install a Minikube on your own local machine. If you do want a cloud hosted solution for your Kubernetes cluster there is AWS, Azure, Google Cloud, and many more. Another link is below to check out the official Kubernetes documentation to see a full list of available solutions. For the Certified Kubernetes Administrator exam, you'll be exposed to many different types of clusters. So to get to know the inner workings and to get your hands dirty with many different types of clusters will help you a lot when you sit for the exam. I encourage you to build many different types of clusters and try the commands in the interactive diagram over here to look around and explore the differences between them. So the kubectl cluster-info tells you where the Kubernetes master is running and Kube DNS is running. Kubectl config view is the brief configuration of your Kubernetes cluster. kubectl describe nodes gives detail information about each individual node. kubectl describe pods in all namespaces gives you a detailed information about all the pods. Kubectl get services --all-namespaces gives you detail about the services in the cluster and then kubectl api-resources will let you view all the resources available to your cluster, and that's it for this lesson on release binaries, provisioning, and types of clusters. Go ahead and mark this lesson complete and move on to the next lesson where we'll be installing Kubernetes from scratch.